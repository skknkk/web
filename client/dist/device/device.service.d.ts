import { Brand } from "./brand.model";
import { CreateBrandDto } from "./dto/create-brand.dto";
import { UpdateBrandDto } from "./dto/update-brand.dto";
import { Type } from "./type.model";
import { UpdateTypeDto } from "./dto/update-type.dto";
import { CreateTypeDto } from "./dto/create-type.dto";
import { DeviceInfo } from "./device-info.model";
import { CreateDeviceInfoDto } from "./dto/create-device-info.dto";
import { UpdateDeviceInfoDto } from "./dto/update-device-info.dto";
import { Device } from "./device.model";
import { CreateDeviceDto } from "./dto/create-device.dto";
import { UpdateDeviceDto } from "./dto/update-device.dto";
import { RatingService } from "../rating/rating.service";
import { FilesService } from "../files/files.service";
export declare class DeviceService {
    private brandRepository;
    private typeRepository;
    private deviceInfoRepository;
    private deviceRepository;
    private ratingService;
    private filesService;
    constructor(brandRepository: typeof Brand, typeRepository: typeof Type, deviceInfoRepository: typeof DeviceInfo, deviceRepository: typeof Device, ratingService: RatingService, filesService: FilesService);
    createBrand(dto: CreateBrandDto): Promise<Brand>;
    getBrandByBrandId(id: number): Promise<Brand>;
    private getBrandByName;
    getAllBrands(): Promise<Brand[]>;
    deleteBrand(id: number): Promise<Brand>;
    updateBrand(id: number, dto: UpdateBrandDto): Promise<Brand>;
    createType(dto: CreateTypeDto): Promise<Type>;
    getTypeByTypeId(id: number): Promise<Type>;
    private getTypeByName;
    getAllTypes(): Promise<Type[]>;
    deleteType(id: number): Promise<Type>;
    updateType(id: number, dto: UpdateTypeDto): Promise<Type>;
    createDeviceInfo(dto: CreateDeviceInfoDto): Promise<DeviceInfo>;
    private getDeviceInfoByDeviceIdAndTitle;
    private getDeviceInfoByDeviceInfoId;
    getDeviceInfoByDeviceId(deviceId: number): Promise<DeviceInfo[]>;
    getAllDeviceInfos(): Promise<DeviceInfo[]>;
    deleteDeviceInfo(id: number): Promise<DeviceInfo>;
    updateDeviceInfo(deviceId: number, title: string, dto: UpdateDeviceInfoDto): Promise<DeviceInfo>;
    createDevice(dto: CreateDeviceDto, image: any): Promise<Device>;
    getDeviceById(id: number): Promise<Device>;
    private getDeviceByName;
    getAllDevices(): Promise<Device[]>;
    deleteDevice(id: number): Promise<Device>;
    updateDevice(id: number, dto: UpdateDeviceDto, image?: any): Promise<Device>;
}
